
#include <sys/time.h>
#include <thread>
#include <chrono>
#include <time.h>
#include <string>
#include <iostream>
#include <ctime>

using namespace std::chrono;
using namespace std;

int print_arr(int arr[], int len){
    for (int i=0; i< len; i++)
        printf("%d\n", arr[i]);
    return 0;
}

int make_arr(int arr[], int len){
   int start = 0;

    int end = 2000;
    for (int i=0; i< len; i++){
        srand(time(0));
        arr[i] = rand() % (end - start + 1) + start;}
    return 0;
}
//1/
int bubble_sort(int arr[], int len){
    for (int i = 0; i < len; i++) {
        for (int j = 0; j < len - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                int b = arr[j]; // создали дополнительную переменную
                arr[j] = arr[j + 1]; // меняем местами
                arr[j + 1] = b; // значения элементов
      }
    }
  }
  return 0;
}

//2/
void Comb_Sort(int *arr, int n)
{
  int gap = n;
  while (gap != 1) {
    gap = int(gap/1.3);
    if (gap < 1)
       gap= 1;
    for (int i=0; i<n-gap; i++) {
      if (arr[i] > arr[i+gap])
        swap(arr[i], arr[i+gap]); }
  }
}


//3/
void qsortRecursive(int arr[], int len) {
    int i = 0;
    int j = len - 1;
    int mid = arr[len / 2];
    do {
        while(arr[i] < mid) {
            i++;
        }
        while(arr[j] > mid) {
            j--;
        }
        if (i <= j) {
            swap (arr[i], arr[j]);
            i++;
            j--;
        }
    } while (i <= j);
    if(j > 0) {
        qsortRecursive(arr, j + 1);}
    if (i < len) {
        qsortRecursive(&arr[i], len - i);}
}

//4/
int shaker_sort(int arr[], int len){
    bool sort_or_not = true;
    int right = len - 1;
    int left = 1;
    do {
        sort_or_not = true;
        for (int i = left; i <= right; i++) {
            if (arr[i - 1] > arr[i]) {
                swap (arr[i - 1], arr[i]);
                sort_or_not = false;}}
        right--;
        for (int i = right; i >= left; i--) {
            if (arr[i] < arr[i - 1]) {
                swap (arr[i], arr[i - 1]);
                sort_or_not = false;}}
        left++;
    } while (sort_or_not == false);
    return 0;
}

//5/
void merge(int *array, int l, int m, int r) {
   int i, j, k, nl, nr;
   //size of left and right sub-arrays
   nl = m-l+1; nr = r-m;
   int larr[nl], rarr[nr];
   //fill left and right sub-arrays
   for(i = 0; i<nl; i++)
      larr[i] = array[l+i];
   for(j = 0; j<nr; j++)
      rarr[j] = array[m+1+j];
   i = 0; j = 0; k = l;
   //marge temp arrays to real array
   while(i < nl && j<nr) {
      if(larr[i] <= rarr[j]) {
         array[k] = larr[i];
         i++;
      }else{
         array[k] = rarr[j];
         j++;
      }
      k++;
   }
   while(i<nl) {       //extra element in left array
      array[k] = larr[i];
      i++; k++;
   }
   while(j<nr) {     //extra element in right array
      array[k] = rarr[j];
      j++; k++;
   }
}
void mergeSort(int *array, int l, int r) {
   int m;
   if(l < r) {
      m = l+(r-l)/2;
      // Sort first and second arrays
      mergeSort(array, l, m);
      mergeSort(array, m+1, r);
      merge(array, l, m, r);
   }
}

uint64_t
timeSinceEpochMillisec()
{
    using namespace std::chrono;
    return duration_cast<milliseconds>(system_clock::now().time_since_epoch()).count();
}


double
start(int arr[], int len, int sort_type)
{
    setlocale(LC_ALL,"RUS");
    double res;
    for (int n=0; n < 100; n ++) {
    //printf("Выберите тип сортировки\n1. Сортировка пузырьком\n2. Сортировка расческой\n3. Быстрая сортировка\n4. Сортировка шейкером\n5. Сортировка слиянием\n");
    //scanf("%d", &sort_type);
      switch(sort_type)
      {
        case 1: {
            //cout << "\nСортировка пузырьком: ";
            clock_t start = clock();
            bubble_sort(arr, len);
            clock_t end = clock();
            res = (double)(end - start) / CLOCKS_PER_SEC;
            } break;
        case 2: {
            //cout << "\nСортировка расческой: ";
            clock_t start = clock();
            Comb_Sort(arr, len);
            clock_t end = clock();
            res = (double)(end - start) / CLOCKS_PER_SEC;
            } break;
        case 3: {
            //cout << "\nБыстрая сортировка: ";
            clock_t start = clock();
            qsortRecursive(arr, len);
            clock_t end = clock();
            res = (double)(end - start) / CLOCKS_PER_SEC;
            } break;
        case 4: {
            //cout << "\nОптимизированная сортировка шейкером: ";
            clock_t start = clock();
            shaker_sort(arr, len);
            clock_t end = clock();
            res = (double)(end - start) / CLOCKS_PER_SEC;
            } break;
        case 5: {
            //cout << "\nСортировка слиянием: ";
            clock_t start = clock();
            mergeSort(arr, 0, len-1);
            clock_t end = clock();
            res = (double)(end - start) / CLOCKS_PER_SEC;
            } break;
        default: {
            cout << "\nВведите тип сортировки...\n" << "\n";
            } break;
      }
    return res;}
}


int main(){
  double sum_t = 0;
  //double sums_arr [20];
  for (int sort_type = 1; sort_type <=5; ++sort_type) {
    if (sort_type == 1) {
      cout << "BUBLE SORT" << endl;
    } else if (sort_type == 2) {
      cout << "COMB SORT" << endl;
    } else if (sort_type == 3) {
      cout << "QUICK SORT" << endl;
    } else if (sort_type == 4) {
      cout << "SHAKER SORT" << endl;
    } else {
      cout << "MERGE SORT" << endl;
    }
    sum_t = 0;

    for (int i = 20; i <= 10000; i+=100) {
      for (int repeat = 0; repeat< 100; repeat ++) {
        int arr[i];
        int len = i;
        make_arr(arr, len);
        sum_t += start(arr, len, sort_type);
      }
      sum_t /= 100;
      cout << i << " " << (double)sum_t << endl;
    }
  }
}

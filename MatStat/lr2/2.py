import math

array = [88.61, 88.50, 71.46, 95.21, 100.57, 83.50, 66.31, 75.17, 103.86,
         85.38, 86.94, 94.46, 75.21, 85.23, 94.78, 67.43, 90.49, 81.38,
         112.22, 76.42, 89.35, 74.77, 79.95, 94.51, 80.28, 73.26, 87.96,
         83.99, 75.33, 89.78, 73.72, 90.39, 67.63, 61.55, 74.57, 73.04,
         87.21, 77.80, 80.79, 87.35, 80.17, 81.29, 80.81, 98.31, 89.61,
         80.77, 69.46, 70.90, 80.66, 93.32, 85.54, 64.76, 104.76, 86.36,
         94.83, 82.03, 79.77, 66.24, 89.95, 85.07, 89.39, 59.89, 90.82,
         90.49, 90.83, 101.97, 69.79, 70.98, 76.90, 73.72, 84.20, 96.05,
         74.56, 70.71, 94.25, 63.41, 88.91, 99.43, 55.63, 99.28, 86.20,
         74.42, 70.44, 87.36, 104.18, 90.87, 95.29, 92.94, 80.23, 70.99,
         80.45, 95.65, 87.56, 77.48, 83.34, 85.33, 98.38, 97.55, 74.45,
         84.21, 78.13, 66.80, 85.14, 58.69, 77.02,
         103.19, 82.14, 70.00, 78.74, 104.58, 75.44]

array = [40.1, 44.3, 46.2, 34.8, 31.1, 15, 42.3, 25.7, 42,
         31.9, 45.5, 38.7, 38.7, 47.2, 46.2, 47.5, 48, 35.5,
         37.6, 57.1, 40.1, 58.6, 27.6, 51.3, 36.9, 49.6, 31.3,
         43, 2.9, 31.8, 39.3, 37.4, 45, 34.4, 54.9, 38.8,
         49.1, 50.9, 43.7, 57, 36.5, 28.9, 34.4, 35, 51.9,
         46.2, 44.4, 40.4, 32, 33.6, 45.4, 56.8, 41.7, 43.2,
         42.1, 52.4, 36.1, 57.6, 33.4, 64.3, 44, 50.7, 27.3,
         31.5, 45.2, 34.2, 33.2, 35.6, 33, 38.7, 26.1,
         45.6, 29.6, 36, 31.1, 58.8, 20.1, 58, 38.4,
         52.7, 45.3, 38, 36, 46.6, 44.9, 64.4, 38.2,
         16, 39.4, 34, 49.1, 40.6, 46.1, 27.8, 46.4]
'''
array = [175.90, 181.01, 215.91, 206.59, 184.88, 237.49, 249.01, 235.54, 191.50,
         216.87, 190.81, 207.80, 233.02, 189.70, 247.25, 180.65, 200.10, 236.91,
         244.12, 203.35, 146.34, 209.60, 186.29, 232.19, 200.71, 234.51, 205.66,
         224.77, 180.50, 225.46, 238.81, 214.37, 215.69, 203.17, 208.61, 191.11,
         215.65, 160.51, 208.64, 188.20, 233.58, 231.23, 185.91, 162.05, 213.39,
         208.76, 188.29, 213.42, 206.09, 186.87, 140.26, 202.21, 219.78, 175.94,
         241.24, 173.94, 237.75, 198.73, 183.72, 203.04, 213.76, 223.47, 174.55,
         180.28, 202.08, 187.57, 171.65, 190.13, 174.28, 250.05, 207.09, 204.93,
         236.04, 210.43, 219.24, 193.86, 173.47, 261.09, 197.64, 164.95, 225.02,
         240.79, 192.67, 208.78, 208.15, 169.75, 202.31, 232.03, 159.48, 184.32,
         271.89, 259.26, 181.33, 169.01, 207.82, 189.06, 138.40, 199.74, 204.84,
         209.72, 208.33, 206.93, 178.98, 198.40, 221.68, 230.30, 198.92, 203.15, 229.33, 217.53, 214.74, 228.18]

array = [65, 67, 63, 58, 70, 69, 74, 85, 76, 77,
         80, 76, 75, 63, 70, 65, 75, 69, 73, 80,
         72, 56, 68, 71, 60, 65, 70, 78, 82, 50,
         55, 71, 66, 62, 60, 75, 72, 70, 65, 67,
         84, 69, 77, 61, 74, 75, 70, 72, 71, 54]
'''
after_dot = 2

print("\n1 .ОБЪЕМ ВЫБОРКИ (n)")
n_1_1 = len(array)
print("n_1_1 =", n_1_1)

print("\n2.1 MAX/MIN (Xmax/Xmin)")
x_min_1_2 = min(array)
x_max_1_2 = max(array)
print("x_max_1_2 =", x_max_1_2, "x_min_1_2 =", x_min_1_2)

print("\n2.2 РАЗМАХ ВАРЬИРОВАНИЯ (R)")
r_1_3 = x_max_1_2 - x_min_1_2
print("r_1_3 =", r_1_3)

print("\n3.1 МЕДИАНА")
if n_1_1 % 2 == 1:
    med = sorted(array)[n_1_1 // 2]
else:
    med = (sorted(array)[n_1_1 // 2] + sorted(array)[n_1_1 // 2 + 1]) / 2
print("med =", med)

print("\n3.2 МОДА")
moda = [0, 0]
for i in set(array):
    if array.count(i) > moda[0]:
        moda[0] = array.count(i)
        moda[1] = i
print(f"moda = {moda[1]} встречается {moda[0]} раз")

print("\n4. ИНТЕРВАЛЬНЫЙ РЯД РАСПРЕДЕЛЕНИЯ ЧАСТОТ")

print("\n4.1 Количество частичных интервалов (m)")
m_1_4 = int(1 + 3.322 * math.log10(n_1_1))
print("m_1_4 =", m_1_4)

print("\n4.2 Длина (шаг) частичного интервала (h)")
h_1_5 = round((x_max_1_2 - x_min_1_2) / m_1_4, 2)
print("h_1_5 =", h_1_5, 2)

print("\n4.3.1 Границы всех частичных интервалов (Xi-Xi+1)")
intervals = {}
for i in range(m_1_4):
    intervals[x_min_1_2 + i * h_1_5] = 0
keeys = list(intervals.keys())

for i in range(m_1_4):
    if i == m_1_4 - 1:
        print(f"[{round(keeys[i], after_dot)}-{x_max_1_2}]")
    else:
        print(f"[{round(keeys[i], after_dot)}-{round(keeys[i + 1], after_dot)}]", end=', ')

print("\n4.3.2 Частоты интервалов (ni)")
for el in array:
    for key, value in intervals.items():
        if key == keeys[-1]:
            if key <= el <= x_max_1_2:
                intervals[key] = intervals[key] + 1
        elif key <= el <= key + h_1_5:
            intervals[key] = intervals[key] + 1
chastoty = list(intervals.values())
print(chastoty)
print(sum(chastoty), n_1_1)

print("\n4.3.3 Серединыы частичных интервалов (Xi)")
sered_intervals = [(keeys[i] + keeys[i + 1]) / 2 for i in range(m_1_4 - 1)] + [(keeys[-1] + x_max_1_2) / 2]
print(sered_intervals)

print("\n4.3.4 Относительные частоты интервалов (wi)")
otnos_chast = [i / n_1_1 for i in chastoty]
print(otnos_chast)

print("\n4.3.5 Значения для гистограммы (wi/h)")
znach_gist = [i / h_1_5 for i in otnos_chast]
print(znach_gist)

print("\n----------------------------------\n")
print("6. ТОЧЕЧНЫЕ ОЦЕНКИ ПАРАМЕТРОВ РАСПРЕДЕЛЕНИЯ F*(x)")

print("\n6.1 Выборочная средняя (Xv)")
x_v_sred = 0
for i in range(n_1_1):
    x_v_sred += array[i]  #
x_v_sred /= n_1_1
print("x_v_sred =", x_v_sred)

print("\n6.2 Выборочная дисперсия (D)")
d_v = 0
for i in range(n_1_1):
    d_v += (array[i] - x_v_sred) ** 2
d_v = d_v / n_1_1
print("d_v =", d_v)

print("\n6.3 Иправленная выборочная дисперсия (s)")
s_2 = n_1_1 / (n_1_1 - 1) * d_v
print("s_2 =", s_2, "s =", s_2 ** 0.5, )

print("\n----------------------------------\n")
print("7. ИНТЕРВАЛЬНЫЕ ОЦЕНКИ ПАРАМЕТРОВ РАСПРЕДЕЛЕНИЯ (y = 0.9)")
a = x_v_sred
s_v = d_v ** 0.5
print("s_v =", s_v)
print("a =", x_v_sred)

y = 0.9
alfa = 1 - y
k = n_1_1 - 1
t = 1.6588241874019427

print("\n7.1 Доверительный интервал для математического ожидания")
dov_a = [0, 0]
dov_a[0] = x_v_sred - t * s_v / n_1_1 ** 0.5
dov_a[1] = x_v_sred + t * s_v / n_1_1 ** 0.5
print("dov_a =", dov_a)

print("\n7.2 Доверительный интервал для среднего квадратичного отклонения")
q = 1.65895
dov_sigma = [0, 0]
# dov_sigma[0] = s_2**0.5 * (1 - q)
dov_sigma[1] = (s_2 ** 0.5) * (1 + q)
print("dov_sigma =", dov_sigma)

print("\n----------------------------------\n")
print("8. КРИТЕРИЙ СОГЛАСИЯ ПИРСОНА (a = 0.05)")
a = 0.05

print("\n8.1 Ui и число степеней свободы")
k = m_1_4 - r_1_3 - 1
u_i = [(sered_intervals[i] - x_v_sred) / s_v for i in range(m_1_4)]
print(u_i)

print("\n8.2 Значение функции Гаусса")
fi_u_i = [1 / ((2 * math.pi) ** 0.5) * math.exp(-u_i[i] ** 2 / 2) for i in range(m_1_4)]
print(fi_u_i)

print("\n8.3 Теоретические вероятности попадания в интервал")
teor_ver = [h_1_5 / s_v * fi_u_i[i] for i in range(m_1_4)]
print(teor_ver)
print(sum(teor_ver))

print("\n8.4 Теоретические частоты")
teor_chast = [n_1_1 * teor_ver[i] for i in range(m_1_4)]
print(teor_chast)
print("sum =", sum(teor_chast))

print("\n8.5 Объединение (1 и 2) и нахождение X^2 набл")
teor_chast_ob = [teor_chast[0] + teor_chast[1]] + [i for i in teor_chast[2:]]
chastoty_ob = [chastoty[0] + chastoty[1]] + [i for i in chastoty[2:]]
x_nabl_2 = [(chastoty_ob[i] - teor_chast_ob[i]) ** 2 / teor_chast_ob[i] for i in range(m_1_4 - 1)]
print(x_nabl_2)
print("x_nabl_2 =", sum(x_nabl_2))

# a при y = 0.97?
# найти объем выборочной соовкупности
# чтобы с вероятностью 0.95 отклонение мат.ожидания
# от выборочной средней не превысило или равно 2х единиц
# (дельта = 2, Хв известно)? Найти из мат.ожидания (интервала)

print("\n----------------------------------\n")
print("7. ИНТЕРВАЛЬНЫЕ ОЦЕНКИ ПАРАМЕТРОВ РАСПРЕДЕЛЕНИЯ (y = 0.97)")
a = x_v_sred
s_v = d_v ** 0.5
print("s_v =", s_v)
print("a =", x_v_sred)

y = 0.97
alfa = 1 - y
k = n_1_1 - 1
t = 1.6588241874019427

print("\n7.1 Доверительный интервал для математического ожидания")
dov_a = [0, 0]
dov_a[0] = x_v_sred - t * s_v / n_1_1 ** 0.5
dov_a[1] = x_v_sred + t * s_v / n_1_1 ** 0.5
print("dov_a =", dov_a)

print("\n7.2 Доверительный интервал для среднего квадратичного отклонения")
q = 1.65895
dov_sigma = [0, 0]
# dov_sigma[0] = s_2**0.5 * (1 - q)
dov_sigma[1] = (s_2 ** 0.5) * (1 + q)
print("dov_sigma =", dov_sigma)
